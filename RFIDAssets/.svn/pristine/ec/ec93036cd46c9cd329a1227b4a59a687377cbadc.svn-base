### set log levels 输出信息### 
log4j.rootLogger = INFO , Console , E ,ROLLING_FILE
#log4j.rootLogger = warn , Console , D,MAIL

### direct log messages to stdout ###
###指定在控制台输出的格式显示###
#%m   输出代码中指定的消息
#%r   输出自应用启动到输出该log信息耗费的毫秒数 
#%c   输出所属的类目，通常就是所在类的全名 
#%t   输出产生该日志事件的线程名 
#%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
#%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss ,SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
#%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 
#log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n
#log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%5p %c{1} - %m%n

### 输出到日志文件，输出到tomcat日志文件 ###
#log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.D.Append = true
#log4j.appender.D.File = ${catalina.home}/logs/log
#log4j.appender.dailyFile.DatePattern='.'yyyy-MM-dd'.log'
##log4j.appender.D.DatePattern=yyyy-MM-dd-HH-mm'.log'按分钟不同命名方式
##log4j.appender.D.MaxFileSize=5MB
##log4j.appender.D.MaxBackupIndex=10
##输出DEBUG，INFO级别以上的日志 (注意只能加在首行，不能加在后面，不然会报警告)
#log4j.appender.D.Threshold = DEBUG
##解决乱码问题
#log4j.appender.D.Encoding=UTF-8
#log4j.appender.D.layout = org.apache.log4j.PatternLayout 
#log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [ %p ] %c{1} - %m%n


### 输出到日志文件，输出到tomcat日志文件,以文件大小 ###
log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender 
log4j.appender.ROLLING_FILE.Threshold=DEBUG 
log4j.appender.dailyFile.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.ROLLING_FILE.Append=true 
log4j.appender.ROLLING_FILE.File=${catalina.home}/logs/loglog- 
log4j.appender.ROLLING_FILE.MaxFileSize=30MB
log4j.appender.ROLLING_FILE.MaxBackupIndex=50 
log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout 
log4j.appender.ROLLING_FILE.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} - [ %p ] %c{1} - %m%n

### 输出错误信息到日志文件，输出到tomcat日志文件 ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = ${catalina.home}/logs/error
log4j.appender.E.MaxFileSize=5MB
log4j.appender.E.MaxBackupIndex=10
#服务器启动日志是追加，false：服务器启动后会生成日志文件把老的覆盖掉
log4j.appender.E.Append = true
### 输出DEBUG，INFO级别以上的日志 (注意只能加在首行，不能加在后面，不然会报警告)
log4j.appender.E.Threshold = WARN
###解决乱码问题
log4j.appender.E.Encoding=UTF-8
log4j.appender.E.layout = org.apache.log4j.PatternLayout 
#设置每天生成一个文件名后添加的名称,备份名称：年月日.log
log4j.appender.dailyFile.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [ %p ] %c{1} - %m%n

# MyBatis logging configuration file...
#log4j.logger.pers.wxp.dao=TRACE
log4j.logger.com.daoben.rfid.mapper=TRACE

# MyBatis SQL logging configuration...
log4j.logger.org.mybatis.example=DEBUG

## MAIL
#log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender
## 日志的错误级别
#log4j.appender.MAIL.Threshold=ERROR 
## 缓存文件大小，日志达到512K时发送Email
#log4j.appender.MAIL.BufferSize=2
## 发送邮件的服务器
#log4j.appender.MAIL.SMTPHost=smtp.163.com
#
## 邮件的标题
#log4j.appender.MAIL.Subject=Log4J ErrorMessage
## 用户名
#log4j.appender.MAIL.SMTPUsername=xplx12@163.com
## 密码,填写的是SMT授权密码
#log4j.appender.MAIL.SMTPPassword=wxp123456
## 发件人地址
#log4j.appender.MAIL.From=xplx12@163.com
## 日志邮件的接收者
#log4j.appender.MAIL.To=1099272020@qq.com 
#log4j.appender.E.Encoding=UTF-8
## 日志PatternLayout
#log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout
## 日志的格式
#log4j.appender.MAIL.layout.ConversionPattern= %d - %c -%-4r [%t] %-5p %c %x - %m%n








