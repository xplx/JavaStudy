package com.daoben.rfid.reader;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;

import javax.annotation.Resource;
import javax.sound.midi.MidiDevice.Info;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;

import com.daoben.rfid.service.AssetWarnService;
import com.daoben.rfid.service.IoLibraryService;
import com.daoben.rfid.utils.ToStringSixteen;

@Service
public class TcpRfidTag { // 创建类MyTcp
	@Resource
	private ToStringSixteen toStringSixteen;

	@Resource
	private ReaderFunction readerFunction;

	@Resource
	private AssetWarnService asw;

	@Resource
	private IoLibraryService ioLibraryService;

	private Logger log = Logger.getLogger(this.getClass());

	/**
	 * 读取RFID标签休眠时间调整
	 */
	public void delay_ms(int time) {
		try {
			Thread.sleep(1000 * time);// s
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 盘点RFID
	 */
	public void getRfidCheck() {
		int servPort = 8082;// 端口号
		// Create a server socket to accept client connection request
		ServerSocket servSocket = null;
		int recvMsgSize = 0;
		byte[] receivBuf = new byte[20];
		try {
			servSocket = new ServerSocket(servPort);
			while (true) {
				Socket clientSocket = servSocket.accept();
				SocketAddress clientAddress = clientSocket.getRemoteSocketAddress();
				System.out.println("Handling client at " + clientAddress);
				InputStream in = clientSocket.getInputStream();
				// OutputStream out = clientSocket.getOutputStream();
				// receive until client close connection,indicate by -l return
				while ((recvMsgSize = in.read(receivBuf)) != -1) {
					// String recString = new String(receivBuf, "ISO-8859-1");//
					// System.out.println("显示字符串"+recString);// 获取收集数据
					if (recvMsgSize == 20) {
						/******** 获取标签ID号 ********/
						String recString = toStringSixteen.ByteToStriong(receivBuf);// 接收16进制数据
						String Htag_id = recString.substring(20, 22);// 标签id高字节
						String Ltag_id = recString.substring(18, 20);// 标签id低字节
						String Hexttag_id = Htag_id.concat(Ltag_id); // 整合标签号
						int tag_id = Integer.parseInt(Hexttag_id, 16);// 获取标签ID号

						/******** 获取标签电量状态 ********/
						String HexElectric = recString.substring(22, 24);// 获取标签id状态字节
						String Electric = toStringSixteen.HexStringToTwobinary(HexElectric);// 将16进制转换成2进制
						String BElectric = Electric.substring(0, 1);// 标签电量位数
						int BBElectric = Integer.valueOf(BElectric, 2);// 将
						log.info("8082客户端数据：" + recString);
						log.info("8082标签Tag_Id：" + tag_id);
						log.info("8082标签电量：" + BElectric);
						log.info("8082标签电量：" + BBElectric);
						// readerFunction.updateRealTimeInfo(tag_id,
						// BBElectric);// 盘点标签，监控电量
						// readerFunction.MonitorTagIdLose();// 查询丢失报警
						// readerFunction.MonitoRelectricInfo(tag_id);// 查询电量报警
					}
					// out.write(receivBuf, 0, recvMsgSize);//回写数据
				}
				clientSocket.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 接收出库读写器数据
	 */
	public void getRfidOutPut() {

		int servPort = 8083;// 端口号
		// Create a server socket to accept client connection request
		ServerSocket servSocket = null;
		int recvMsgSize = 0;
		byte[] receivBuf = new byte[20];
		try {
			servSocket = new ServerSocket(servPort);
			while (true) {
				Socket clientSocket = servSocket.accept();
				SocketAddress clientAddress = clientSocket.getRemoteSocketAddress();
				System.out.println("Handling client at " + clientAddress);
				InputStream in = clientSocket.getInputStream();
				// OutputStream out = clientSocket.getOutputStream();
				// receive until client close connection,indicate by -l return
				while ((recvMsgSize = in.read(receivBuf)) != -1) {
					// String recString = new String(receivBuf, "ISO-8859-1");//
					// System.out.println("显示字符串"+recString);// 获取收集数据
					if (recvMsgSize == 20) {
						/******** 获取标签ID号 ********/
						String recString = toStringSixteen.ByteToStriong(receivBuf);// 接收16进制数据
						String Hexid = recString.substring(18, 22);
						String Htag_id = recString.substring(20, 22);// 标签id高字节
						String Ltag_id = recString.substring(18, 20);// 标签id低字节
						String Hexttag_id = Htag_id.concat(Ltag_id); // 整合标签号
						int tag_id = Integer.parseInt(Hexttag_id, 16);// 获取标签ID号

						log.info("出库读写器");
						log.info("8083客户端数据：" + recString);
						log.info("8083标签Tag_Id：" + tag_id);

						// readerFunction.MonitorWarnInfo(tag_id);// 监控出库报警
						// asw.updateOutLibrary(tag_id + "");// 更改出库状态,监控出库报警
						readerFunction.insertReadeIoTime("192.168.0.217", tag_id, "out");// 插入实时进出库数据,用于进出库数据判断
						// readerFunction.insertReadeIoTime("192.168.0.217",
						// tag_id, "in");// 插入实时进出库数据,用于进出库数据判断
						// ioLibraryService.insert();//判断进出库
					}
					// out.write(receivBuf, 0, recvMsgSize);//回写数据
				}
				clientSocket.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 接收出库读写器数据
	 */
	public void SendRfidWarnInfo() {

		int servPort = 8084;// 端口号
		// Create a server socket to accept client connection request
		ServerSocket servSocket = null;
		int recvMsgSize = 0;
		byte[] receivBuf = new byte[20];
		byte[] SendWarn = { 0x1 };
		try {
			servSocket = new ServerSocket(servPort);
			while (true) {
				Socket clientSocket = servSocket.accept();
				SocketAddress clientAddress = clientSocket.getRemoteSocketAddress();
				System.out.println("Handling client at " + clientAddress);
				InputStream in = clientSocket.getInputStream();
				OutputStream out = clientSocket.getOutputStream();
				// receive until client close connection,indicate by -l return
				while (true) {
					delay_ms(10);// 10s
					out.write(SendWarn, 0, 1);// 发送报警信息
//					if (readerFunction.MonitorAllWarnInfo() != null) {// 查询是否发生报警
//						delay_ms(5);// 10s
//						out.write(SendWarn, 0, 1);// 发送报警信息
//					}
				}
				// clientSocket.close();// 关闭客户端
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
