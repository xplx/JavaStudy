package com.daoben.rfid.utils;

import java.io.*;
import java.util.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import org.springframework.stereotype.Service;

import gnu.io.*;

@Service
public class DSerialPort extends Thread implements SerialPortEventListener { // SerialPortEventListener
	// 监听器,我的理解是独立开辟一个线程监听串口数据
	static CommPortIdentifier portId; // 串口通信管理类
	static Enumeration<?> portList; // 有效连接上的端口的枚举
	InputStream inputStream; // 从串口来的输入流
	static OutputStream outputStream;// 向串口输出的流
	static SerialPort serialPort; // 串口的引用
	private BlockingQueue<String> msgQueue = new LinkedBlockingQueue<String>(); // 堵塞队列用来存放读到的数据

	@Override
	/**
	 * SerialPort EventListene 的方法,持续监听端口上是否有数据流
	 */
	public void serialEvent(SerialPortEvent event) {//

		switch (event.getEventType()) {
		case SerialPortEvent.BI:
		case SerialPortEvent.OE:
		case SerialPortEvent.FE:
		case SerialPortEvent.PE:
		case SerialPortEvent.CD:
		case SerialPortEvent.CTS:
		case SerialPortEvent.DSR:
		case SerialPortEvent.RI:
		case SerialPortEvent.OUTPUT_BUFFER_EMPTY:
			break;
		case SerialPortEvent.DATA_AVAILABLE:// 当有可用数据时读取数据
			byte[] readBuffer = new byte[20];
			try {
				int numBytes = -1;
				while (inputStream.available() > 0) {
					numBytes = inputStream.read(readBuffer);

					if (numBytes > 0) {
						msgQueue.add(new Date() + "真实收到的数据为：-----" + new String(readBuffer));
						readBuffer = new byte[20];// 重新构造缓冲对象，否则有可能会影响接下来接收的数据
					} else {
						msgQueue.add("额------没有读到数据");
					}
				}
			} catch (IOException e) {
			}
			break;
		}
	}

	/**
	 * 
	 * 通过程序打开COM4串口，设置监听器以及相关的参数
	 * 
	 * @return 返回1 表示端口打开成功，返回 0表示端口打开失败
	 */
	public int startComPort() {
		// 通过串口通信管理类获得当前连接上的串口列表
		portList = CommPortIdentifier.getPortIdentifiers();

		while (portList.hasMoreElements()) {

			// 获取相应串口对象
			portId = (CommPortIdentifier) portList.nextElement();

			System.out.println("设备类型：--->" + portId.getPortType());
			System.out.println("设备名称：---->" + portId.getName());
			// 判断端口类型是否为串口
			if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
				// 判断如果COM4串口存在，就打开该串口
				if (portId.getName().equals("COM4")) {
					try {
						serialPort = (SerialPort) portId.open("COM_4", 2000);// 打开串口名字为COM_4(名字任意),延迟为2毫秒
					} catch (PortInUseException e) {
						e.printStackTrace();
						return 0;
					}
					try {
						inputStream = serialPort.getInputStream();// 设置当前串口的输入输出流
						outputStream = serialPort.getOutputStream();
					} catch (IOException e) {
						e.printStackTrace();
						return 0;
					}
					// 给当前串口添加一个监听器
					try {
						serialPort.addEventListener(this);
					} catch (TooManyListenersException e) {
						e.printStackTrace();
						return 0;
					}
					// 设置监听器生效，即：当有数据时通知
					serialPort.notifyOnDataAvailable(true);

					// 设置串口的一些读写参数
					try {
						// 比特率、数据位、停止位、奇偶校验位
						serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,
								SerialPort.PARITY_NONE);
					} catch (UnsupportedCommOperationException e) {
						e.printStackTrace();
						return 0;
					}

					return 1;
				}
			}
		}
		return 0;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		try {
			System.out.println("--------------任务处理线程运行了--------------");
			while (true) {
				if (msgQueue.size() > 0) {
					System.out.println(msgQueue.take());// 如果堵塞队列中存在数据就将其输出
				}
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public void SendWarn() {
		DSerialPort cRead = new DSerialPort();
		int i = cRead.startComPort();
		int warn = 1;
		if (i == 1) {
			// cRead.start();// 启动线程来处理收到的数据
			try {
				// String st = "哈哈----你好";
				// System.out.println("发出字节数：" + st.getBytes("gbk").length);
				// outputStream.write(st.getBytes("gbk"),
				// 0,st.getBytes("gbk").length);//发送汉字
				outputStream.write(warn);
				// cRead.stop(); //停止线程
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			System.out.println("串口打开失败");
			return;
		}
	}
}
